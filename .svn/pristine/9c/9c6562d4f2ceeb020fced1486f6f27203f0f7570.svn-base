<?xml version="1.0"?>
<doc>
<assembly>
<name>
Tools
</name>
</assembly>
<members>
<member name="F:Tools.clsFunctions._log">
	<summary>
 A Database connection for .NET
 </summary>
	<remarks>
 This class does not hold open a connection but 
 instead is stateless: for each request it 
 connects, performs the request and disconnects.
 </remarks>
</member><member name="M:Tools.clsFunctions.To16ths(System.Object)">
	<summary>
 Converts Sixteenths stored to inches
 </summary>
	<param name="Value">Integer in as 16ths</param>
	<returns>A String representing "inches.16ths" formatted to 2 decimal places</returns>
	<remarks></remarks>
</member><member name="M:Tools.clsFunctions.To16ths(System.Double)">
	<summary>
 Converts inches to Sixteenths
 </summary>
	<param name="measurement">in 16ths as Integer</param>
	<returns>A String representing "inches.16ths" formatted to 2 decimal places</returns>
	<remarks></remarks>
</member><member name="M:Tools.clsFunctions.EncryptDecryptString(System.Object)">
	<summary>
 Encrypt a String
 </summary>
	<param name="cryptStr">String to/from Encryption</param>
	<returns>Encrypted or Decrypted Value</returns>
	<remarks></remarks>
</member><member name="M:Tools.clsFunctions.IsNumeric(System.Object)">
	<summary>
 Value Numeric Check
 </summary>
	<param name="Number">Number Value</param>
	<returns>If the Value is a Number</returns>
	<remarks></remarks>
</member><member name="M:Tools.clsFunctions.IsChar(System.String)">
	<summary>
 Value String Check
 </summary>
	<param name="Text">Value in Text</param>
	<returns>If the Value is Text</returns>
	<remarks></remarks>
</member><member name="T:Tools.clsSettings">
 Purpose: Replacement Class for VB GetSetting and
 ''' SaveSetting.  Designed to replace the 
 saving of application Settings in the registry
 with saving in an xml file in the installation directory.
 Allows user to set an alternate path in case of install
 directory lockdown.  Allows user to have their own Settings
 xml file or use one shared by all users on the same machine.
 Allows user to have multiple "AppNames" creating multiple
 xml files and multiple Settings (e.g., Settings, Registration, etc.)
 Completely simulates VB GetSetting and SaveSetting by simply
 instantiating this class and prefacing Get/SaveSetting calls with
 the instance object name, e.g., r.GetSetting(....).
 '''***************************************
 Usage
 
Dim r As New CSettings(True)
CRegions.InsertRegionsInNewClass = _
r.GetSetting(AppTitle, Settings, "IRNC", "N")
r.SaveSetting(AppTitle, Settings, "IRNC", _
IIf(Me.optYesInsert.Checked, "Y", "N"))

</member><member name="F:Tools.Onling.clsDatabase._log">
	<summary>
 A Database connection for .NET
 </summary>
	<remarks>
 This class does not hold open a connection but 
 instead is stateless: for each request it 
 connects, performs the request and disconnects.
 </remarks>
</member><member name="M:Tools.Onling.clsDatabase.#ctor">
	<summary>
  Manual Constructor
 </summary>
	<remarks>All has to be passed manually</remarks>
</member><member name="P:Tools.Onling.clsDatabase.SqlHostname">
	<summary>
 Sql Hostname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Tools.Onling.clsDatabase.SqlUsername">
	<summary>
 Sql Username
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Tools.Onling.clsDatabase.SqlPassword">
	<summary>
 Sql Password
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Tools.Onling.clsDatabase.SqlDBName">
	<summary>
 Sql DBName
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Tools.Onling.clsDatabase.MySqlHostname">
	<summary>
 MySql Hostname
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Tools.Onling.clsDatabase.MySqlUsername">
	<summary>
 MySql Username
 </summary>
	<value></value>
	<remarks></remarks>
</member><member name="P:Tools.Onling.clsDatabase.MySqlPassword">
	<summary>
 MySql Password
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Tools.Onling.clsDatabase.MySqlDBName">
	<summary>
 MySql DBName
 </summary>
	<value></value>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Tools.Onling.clsDatabase.MySqlPort">
	<summary>
 MySql Port
 </summary>
	<value></value>
	<returns></returns>
	<remarks>Default is 3306, This can be left blank</remarks>
</member><member name="M:Tools.Onling.clsDatabase.ODBCConn(System.String,System.String,System.String,System.String,System.String,System.String)">
	<summary>
 ODBC Connection
 </summary>
	<param name="DBServer"> Server HostName</param>
	<param name="DBName">Database Name</param>
	<param name="DBPort">Database Port</param>
	<param name="DBLogin">Database LoginName</param>
	<param name="DBPassword">Database Password</param>
	<param name="DBType">Database Type MySQL, TranSoft or DSN</param>
	<returns></returns>
	<remarks>Opens a connection via ODBC</remarks>
</member><member name="M:Tools.Onling.clsDatabase.MsSqlConn(System.Boolean)">
	<summary>
 Makes a Connection to MsSql
 </summary>
	<param name="Trusted">True or False if you have a trusted connection</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Tools.Onling.clsDatabase.MsSqlState">
	<summary>
 Gets the MsSql Connection State Opened or Closed
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Tools.Onling.clsDatabase.MySqlState">
	<summary>
 Gets the MySql Connection State Opened or Closed
 </summary>
	<returns></returns>
	<remarks></remarks>
</member><member name="T:Tools.Onling.clsDatabase">
	<summary>
 This was intended to replace all the silly functions that I had...
 </summary>
	<remarks></remarks>
</member><member name="F:Tools.Onling.clsSQLExecutes._log">
	<summary>
 A Sql Data Provider Class
 </summary>
	<remarks>This class is used to ease the commands to update the database</remarks>
</member><member name="M:Tools.Onling.clsSQLExecutes.#ctor">
	<summary>
 Blank constructor
 </summary>
	<remarks></remarks>
</member><member name="M:Tools.Onling.clsSQLExecutes.ExecuteNonQuery(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Executes a Transact-SQL statement against the connection and returns the number of rows affected.
 </summary>
	<param name="cmd">The Transact-SQL statement or stored procedure to execute at the data source.</param>
	<param name="cmdType">A value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
	<param name="parameters">The parameters of the Transact-SQL statement or stored procedure.</param>
	<returns>The number of rows affected.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.ExecuteNonQuery(System.String,System.Int32@,System.Object[])">
	<summary>
 Executes a Transact-SQL statement against the connection and returns the number of rows affected.
 </summary>
	<param name="spname">The stored procedure to execute at the data source.</param>
	<param name="returnValue">The returned value from stored procedure.</param>
	<param name="parameterValues">The parameter values of the stored procedure.</param>
	<returns>The number of rows affected.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.ExecuteScalar(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
 </summary>
	<param name="cmd">The Transact-SQL statement or stored procedure to execute at the data source.</param>
	<param name="cmdType">A value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
	<param name="parameters">The parameters of the Transact-SQL statement or stored procedure.</param>
	<returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.ExecuteScalar(System.String,System.Int32@,System.Object[])">
	<summary>
 Executes the query, and returns the first column of the first row in the result set returned by the query. Additional columns or rows are ignored.
 </summary>
	<param name="spname">The stored procedure to execute at the data source.</param>
	<param name="returnValue">The returned value from stored procedure.</param>
	<param name="parameterValues">The parameter values of the stored procedure.</param>
	<returns>The first column of the first row in the result set, or a null reference if the result set is empty.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.ExecuteReader(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Sends the System.Data.SqlClient.SqlCommand.CommandText to the System.Data.SqlClient.SqlCommand.Connection, and builds a System.Data.SqlClient.SqlDataReader using one of the System.Data.CommandBehavior values.
 </summary>
	<param name="cmd">The Transact-SQL statement or stored procedure to execute at the data source.</param>
	<param name="cmdType">A value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
	<param name="parameters">The parameters of the Transact-SQL statement or stored procedure.</param>
	<returns>A System.Data.SqlClient.SqlDataReader object.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.ExecuteReader(System.String,System.Int32@,System.Object[])">
	<summary>
 Sends the System.Data.SqlClient.SqlCommand.CommandText to the System.Data.SqlClient.SqlCommand.Connection, and builds a System.Data.SqlClient.SqlDataReader using one of the System.Data.CommandBehavior values.
 </summary>
	<param name="spname">The stored procedure to execute at the data source.</param>
	<param name="returnValue">The returned value from stored procedure.</param>
	<param name="parameterValues">The parameter values of the stored procedure.</param>
	<returns>A System.Data.SqlClient.SqlDataReader object.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.FillDataset(System.String,System.Data.CommandType,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Adds or refreshes rows in the System.Data.DataSet to match those in the data source using the System.Data.DataSet name, and creates a System.Data.DataTable named "Table."
 </summary>
	<param name="cmd">The Transact-SQL statement or stored procedure to execute at the data source.</param>
	<param name="cmdType">A value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
	<param name="parameters">The parameters of the Transact-SQL statement or stored procedure.</param>
	<returns>A System.Data.Dataset object.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.FillDatasetTable(System.String,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Adds or refreshes rows in the System.Data.DataSet to match those in the data source using the System.Data.DataSet name, and creates a System.Data.DataTable named "Table."
 </summary>
	<param name="cmd">The Transact-SQL statement or stored procedure to execute at the data source.</param>
	<param name="cmdType">A value indicating how the System.Data.SqlClient.SqlCommand.CommandText property is to be interpreted.</param>
	<param name="tbl">Specify the Table name to use</param>
	<param name="parameters">The parameters of the Transact-SQL statement or stored procedure.</param>
	<returns>A System.Data.Dataset object.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.ExecuteDataset(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlCommand,System.Data.DataSet,System.String)">
	<summary>
 Calls the respective INSERT, UPDATE, or DELETE statements for each inserted, updated, or deleted row in the System.Data.DataSet with the specified System.Data.DataTable name.
 </summary>
	<param name="insertCmd">A command used to insert new records into the data source.</param>
	<param name="updateCmd">A command used to update records in the data source.</param>
	<param name="deleteCmd">A command for deleting records from the data set.</param>
	<param name="ds">The System.Data.DataSet to use to update the data source. </param>
	<param name="srcTable">The name of the source table to use for table mapping.</param>
	<returns>The number of rows successfully updated from the System.Data.DataSet.</returns>
</member><member name="M:Tools.Onling.clsSQLExecutes.ExecuteScript(System.String,System.Data.SqlClient.SqlParameter[])">
	<summary>
 Executes a SQL query file against the connection.
 </summary>
	<param name="filename">SQL query file name.</param>
	<param name="parameters">The parameters of the SQL query file.</param>
</member><member name="M:Tools.Onling.SqlDatabaseException.#ctor">
	<summary>
 Initializes a new instance of the ADO.SqlDatabaseException class.
 </summary>
	<remarks></remarks>
</member><member name="M:Tools.Onling.SqlDatabaseException.#ctor(System.String)">
	<summary>
 Initializes a new instance of the ADO.SqlDatabaseException class with a specified error message.
 </summary>
	<param name="message">The message that describes the error.</param>
	<remarks></remarks>
</member><member name="M:Tools.Onling.SqlDatabaseException.#ctor(System.String,System.Exception)">
	<summary>
 Initializes a new instance of the ADO.SqlDatabaseException class with a specified error message 
 and a reference to the inner exception that is the cause of this exception.
 </summary>
	<param name="message">The error message that explains the reason for the exception.</param>
	<param name="innerException">The exception that is the cause of the current exception, or a null reference 
 (Nothing in Visual Basic) if no inner exception is specified.</param>
	<remarks></remarks>
</member><member name="F:Tools.Onling.clsDataSet._log">
	<summary>
 A Dataset class for .NET
 </summary>
	<remarks>
 This class is for the returns of datasets</remarks>
</member><member name="M:Tools.Onling.clsDataSet.#ctor">
	<summary>
 Blank constructor
 </summary>
	<remarks> must be set manually</remarks>
</member><member name="P:Tools.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:Tools.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:Tools.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:Tools.clsCOMMS._log">
	<summary>
 A Kiwiplan Inteface file class for .NET
 </summary>
	<remarks></remarks>
</member><member name="M:Tools.clsCOMMS.#ctor">
	<summary>
 Manual Constructor
 </summary>
	<remarks></remarks>
</member><member name="M:Tools.clsCOMMS.BuildFile(System.Boolean)">
	<summary>
 Function to Build the COMMS file
 </summary>
	<param name="Exported">File Exported Previously True of False</param>
	<returns>Returns the file in a string builder fasion</returns>
	<remarks></remarks>
</member><member name="M:Tools.Onling.FTPclient.#ctor">
	<summary>
 Blank constructor
 </summary>
	<remarks>Hostname, username and password must be set manually</remarks>
</member><member name="M:Tools.Onling.FTPclient.#ctor(System.String)">
	<summary>
 Constructor just taking the hostname
 </summary>
	<param name="Hostname">in either ftp://ftp.host.com or ftp.host.com form</param>
	<remarks></remarks>
</member><member name="M:Tools.Onling.FTPclient.#ctor(System.String,System.String,System.String)">
	<summary>
 Constructor taking hostname, username and password
 </summary>
	<param name="Hostname">in either ftp://ftp.host.com or ftp.host.com form</param>
	<param name="Username">Leave blank to use 'anonymous' but set password to your email</param>
	<param name="Password"></param>
	<remarks></remarks>
</member><member name="M:Tools.Onling.FTPclient.ListDirectory(System.String)">
	<summary>
 Return a simple directory listing
 </summary>
	<param name="directory">Directory to list, e.g. /pub</param>
	<returns>A list of filenames and directories as a List(of String)</returns>
	<remarks>For a detailed directory listing, use ListDirectoryDetail</remarks>
</member><member name="M:Tools.Onling.FTPclient.ListDirectoryDetail(System.String)">
	<summary>
 Return a detailed directory listing
 </summary>
	<param name="directory">Directory to list, e.g. /pub/etc</param>
	<returns>An FTPDirectory object</returns>
</member><member name="M:Tools.Onling.FTPclient.Upload(System.String,System.String)">
	<summary>
 Copy a local file to the FTP server
 </summary>
	<param name="localFilename">Full path of the local file</param>
	<param name="targetFilename">Target filename, if required</param>
	<returns></returns>
	<remarks>If the target filename is blank, the source filename is used
 (assumes current directory). Otherwise use a filename to specify a name
 or a full path and filename if required.</remarks>
</member><member name="M:Tools.Onling.FTPclient.Upload(System.IO.FileInfo,System.String)">
	<summary>
 Upload a local file to the FTP server
 </summary>
	<param name="fi">Source file</param>
	<param name="targetFilename">Target filename (optional)</param>
	<returns></returns>
</member><member name="M:Tools.Onling.FTPclient.Download(System.String,System.String,System.Boolean)">
	<summary>
 Copy a file from FTP server to local
 </summary>
	<param name="sourceFilename">Target filename, if required</param>
	<param name="localFilename">Full path of the local file</param>
	<returns></returns>
	<remarks>Target can be blank (use same filename), or just a filename
 (assumes current directory) or a full path and filename</remarks>
</member><member name="M:Tools.Onling.FTPclient.FtpDelete(System.String)">
	<summary>
 Delete remote file
 </summary>
	<param name="filename">filename or full path</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Tools.Onling.FTPclient.FtpFileExists(System.String)">
	<summary>
 Determine if file exists on remote FTP site
 </summary>
	<param name="filename">Filename (for current dir) or full path</param>
	<returns></returns>
	<remarks>Note this only works for files</remarks>
</member><member name="M:Tools.Onling.FTPclient.GetFileSize(System.String)">
	<summary>
 Determine size of remote file
 </summary>
	<param name="filename"></param>
	<returns></returns>
	<remarks>Throws an exception if file does not exist</remarks>
</member><member name="M:Tools.Onling.FTPclient.GetCredentials">
	<summary>
 Get the credentials from username/password
 </summary>
</member><member name="M:Tools.Onling.FTPclient.GetFullPath(System.String)">
	<summary>
 returns a full path using CurrentDirectory for a relative file reference
 </summary>
</member><member name="M:Tools.Onling.FTPclient.AdjustDir(System.String)">
	<summary>
 Amend an FTP path so that it always starts with /
 </summary>
	<param name="path">Path to adjust</param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:Tools.Onling.FTPclient.GetStringResponse(System.Net.FtpWebRequest)">
	<summary>
 Obtains a response stream as a string
 </summary>
	<param name="ftp">current FTP request</param>
	<returns>String containing response</returns>
	<remarks>FTP servers typically return strings with CR and
 not CRLF. Use respons.Replace(vbCR, vbCRLF) to convert
 to an MSDOS string</remarks>
</member><member name="M:Tools.Onling.FTPclient.GetSize(System.Net.FtpWebRequest)">
	<summary>
 Gets the size of an FTP request
 </summary>
	<param name="ftp"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="P:Tools.Onling.FTPclient.Hostname">
	<summary>
 Hostname
 </summary>
	<value></value>
	<remarks>Hostname can be in either the full URL format
 ftp://ftp.myhost.com or just ftp.myhost.com
 </remarks>
</member><member name="P:Tools.Onling.FTPclient.Username">
	<summary>
 Username property
 </summary>
	<value></value>
	<remarks>Can be left blank, in which case 'anonymous' is returned</remarks>
</member><member name="F:Tools.Onling.FTPclient._currentDirectory">
	<summary>
 The CurrentDirectory value
 </summary>
	<remarks>Defaults to the root '/'</remarks>
</member><member name="T:Tools.Onling.FTPclient">
	<summary>
 A wrapper class for .NET 2.0 FTP
 </summary>
	<remarks>
 This class does not hold open an FTP connection but 
 instead is stateless: for each FTP request it 
 connects, performs the request and disconnects.
 </remarks>
</member><member name="T:Tools.Onling.FTPfileInfo.DirectoryEntryTypes">
	<summary>
 Identifies entry as either File or Directory
 </summary>
</member><member name="M:Tools.Onling.FTPfileInfo.#ctor(System.String,System.String)">
	<summary>
 Constructor taking a directory listing line and path
 </summary>
	<param name="line">The line returned from the detailed directory list</param>
	<param name="path">Path of the directory</param>
	<remarks></remarks>
</member><member name="F:Tools.Onling.FTPfileInfo._ParseFormats">
	<summary>
 List of REGEX formats for different FTP server listing formats
 </summary>
	<remarks>
 The first three are various UNIX/LINUX formats, fourth is for MS FTP
 in detailed mode and the last for MS FTP in 'DOS' mode.
 I wish VB.NET had support for Const arrays like C# but there you go
 </remarks>
</member><member name="T:Tools.Onling.FTPfileInfo">
	<summary>
 Represents a file or directory entry from an FTP listing
 </summary>
	<remarks>
 This class is used to parse the results from a detailed
 directory list from FTP. It supports most formats of
 </remarks>
</member><member name="M:Tools.Onling.FTPdirectory.#ctor(System.String,System.String)">
	<summary>
 Constructor: create list from a (detailed) directory string
 </summary>
	<param name="dir">directory listing string</param>
	<param name="path"></param>
	<remarks></remarks>
</member><member name="M:Tools.Onling.FTPdirectory.GetFiles(System.String)">
	<summary>
 Filter out only files from directory listing
 </summary>
	<param name="ext">optional file extension filter</param>
	<returns>FTPdirectory listing</returns>
</member><member name="M:Tools.Onling.FTPdirectory.GetDirectories">
	<summary>
 Returns a list of only subdirectories
 </summary>
	<returns>FTPDirectory list</returns>
	<remarks></remarks>
</member><member name="T:Tools.Onling.FTPdirectory">
	<summary>
 Stores a list of files and directories from an FTP result
 </summary>
	<remarks></remarks>
</member>
</members>
</doc>